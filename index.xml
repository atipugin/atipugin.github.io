<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>@atipugin</title><link>https://atipugin.dev/</link><description>Здесь будет описание</description><language>ru</language><managingEditor>atipugin@gmail.com (Alexander Tipugin)</managingEditor><webMaster>atipugin@gmail.com (Alexander Tipugin)</webMaster><image>https://atipugin.dev/images/me.png</image><lastBuildDate>Sun, 01 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://atipugin.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Make main() great again</title><link>https://atipugin.dev/posts/make-main-great-again/</link><description>&lt;p>Сегодня поговорим про &lt;code>main&lt;/code>. Поскольку это отправная точка любого нашего Go-приложения, мы хотим иметь возможность удобно тестировать происходящее там.&lt;/p>
&lt;p>Представим код:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello, world&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Даже для такого простого примера мы не можем взять и написать тест, проверяющий его корректность. Всё из-за того, что &lt;code>main&lt;/code> не принимает и не возвращает никаких аргументов, и поделать с этим ничего нельзя - сигнатуру поменять мы не можем.&lt;/p>
&lt;p>Но решение есть. Мы можем добавить новую функцию-делегат, перенести туда всю нашу логику, а в &lt;code>main&lt;/code> просто вызвать её:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">realMain&lt;/span>(&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Stdin&lt;/span>, &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Stdout&lt;/span>, &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Args&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">realMain&lt;/span>(&lt;span style="color:#a6e22e">in&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Reader&lt;/span>, &lt;span style="color:#a6e22e">out&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Writer&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Fprintln&lt;/span>(&lt;span style="color:#a6e22e">out&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Hello, world!&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Наша новая функция &lt;code>realMain&lt;/code> принимает на вход стандартный ввод/вывод (&lt;code>os.Stdin&lt;/code>, &lt;code>os.Stdout&lt;/code>), а также аргументы командной строки (&lt;code>os.Args&lt;/code>). В качестве типов данных используются максимально простые интерфейсы &lt;code>io.Reader&lt;/code> и &lt;code>io.Writer&lt;/code>. На выходе &lt;code>realMain&lt;/code> может вернуть ошибку, если что-то пошло не так.&lt;/p>
&lt;p>Здесь важно обратить внимание на то, что теперь мы не должны использовать стандартный ввод/вывод напрямую. Именно поэтому мы заменили &lt;code>fmt.Println(...)&lt;/code>, на &lt;code>fmt.Fprintln(out, ...)&lt;/code>.&lt;/p>
&lt;p>Такую конструкцию мы уже можем без проблем протестировать:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestRealMain&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;span style="color:#75715e">// Вместо реального ввода/вывода мы будем использовать bytes.Buffer
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">in&lt;/span>, &lt;span style="color:#a6e22e">out&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span>
&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">realMain&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">in&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>, []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>})
&lt;span style="color:#a6e22e">assert&lt;/span>.&lt;span style="color:#a6e22e">NoError&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;span style="color:#a6e22e">assert&lt;/span>.&lt;span style="color:#a6e22e">Contains&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(), &lt;span style="color:#e6db74">&amp;#34;Hello, world!&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="работа-с-флагами">Работа с флагами&lt;/h2>
&lt;p>Немного усложним наш пример. Теперь мы хотим выводить в консоль не просто &amp;ldquo;Hello, world!&amp;quot;, но и имя, которое можно задать с помощью флага &lt;code>-name&lt;/code>. Если же имя не указано, то необходимо вернуть пользователю ошибку.&lt;/p>
&lt;p>Флаги командной строки мы можем получить из параметра &lt;code>args&lt;/code> следующим образом:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> (
&lt;span style="color:#a6e22e">errNoNameGiven&lt;/span> = &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;no name given&amp;#34;&lt;/span>)
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">realMain&lt;/span>(&lt;span style="color:#a6e22e">in&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Reader&lt;/span>, &lt;span style="color:#a6e22e">out&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Writer&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#75715e">// args[0] содержит имя исполняемого файла
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">flags&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">flag&lt;/span>.&lt;span style="color:#a6e22e">NewFlagSet&lt;/span>(&lt;span style="color:#a6e22e">args&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>], &lt;span style="color:#a6e22e">flag&lt;/span>.&lt;span style="color:#a6e22e">ContinueOnError&lt;/span>)
&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">flags&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;your name&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">// Остальные аргументы лежат в args, начиная с 1-го элемента
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">flags&lt;/span>.&lt;span style="color:#a6e22e">Parse&lt;/span>(&lt;span style="color:#a6e22e">args&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>:]); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errNoNameGiven&lt;/span>
}
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Fprintf&lt;/span>(&lt;span style="color:#a6e22e">out&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Hello, %s!\n&amp;#34;&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Мы можем воспользоваться табличными тестами, чтобы проверить поведение нашего приложения при разных флагах на входе:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestRealMain&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;span style="color:#a6e22e">testCases&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">flags&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#a6e22e">output&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
}{
{
&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;valid&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">flags&lt;/span>: []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;-name&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;John Doe&amp;#34;&lt;/span>},
&lt;span style="color:#a6e22e">err&lt;/span>: &lt;span style="color:#66d9ef">nil&lt;/span>,
&lt;span style="color:#a6e22e">output&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello, John Doe!&amp;#34;&lt;/span>,
},
{
&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;no name given&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">flags&lt;/span>: []&lt;span style="color:#66d9ef">string&lt;/span>{},
&lt;span style="color:#a6e22e">err&lt;/span>: &lt;span style="color:#a6e22e">errNoNameGiven&lt;/span>,
&lt;span style="color:#a6e22e">output&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,
},
}
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">tc&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">testCases&lt;/span> {
&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">tc&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">in&lt;/span>, &lt;span style="color:#a6e22e">out&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span>
&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">realMain&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">in&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>, append([]&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>}, &lt;span style="color:#a6e22e">tc&lt;/span>.&lt;span style="color:#a6e22e">flags&lt;/span>&lt;span style="color:#f92672">...&lt;/span>))
&lt;span style="color:#a6e22e">assert&lt;/span>.&lt;span style="color:#a6e22e">Equal&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#a6e22e">tc&lt;/span>.&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;span style="color:#a6e22e">assert&lt;/span>.&lt;span style="color:#a6e22e">Contains&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(), &lt;span style="color:#a6e22e">tc&lt;/span>.&lt;span style="color:#a6e22e">output&lt;/span>)
})
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="вывод">Вывод&lt;/h2>
&lt;p>Такой подход делает наш код более идиоматичным и удобным в тестировании. Теперь мы прозрачно можем тестировать такие вещи, как работа с вводом/выводом, флаги и т.п.&lt;/p></description><author>atipugin@gmail.com (Alexander Tipugin)</author><guid>https://atipugin.dev/posts/make-main-great-again/</guid><pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate></item><item><title>Расширения для VS Code</title><link>https://atipugin.dev/posts/vscode-extensions/</link><description>&lt;p>Решил немного рассказать о расширениях для VS Code, которые здорово упрощают мою жизнь. Специально не стал упоминать ничего, связанного конкретными языками (&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.Go" target="_blank">Go&lt;/a>
, &lt;a href="https://marketplace.visualstudio.com/items?itemName=rebornix.Ruby" target="_blank">Ruby&lt;/a>
, &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank">Prettier&lt;/a>
), потому что тут уже зависит, на чем вы пишите.&lt;/p>
&lt;h2 id="editorconfig">EditorConfig&lt;/h2>
&lt;p>EditorConfig - первое расширение, которое я ставлю в любом редакторе, который планирую более-менее серьезно использовать. Если вы еще не в курсе (такое возможно?), то &lt;a href="https://editorconfig.org" target="_blank">EditorConfig&lt;/a>
автоматически применяет правила форматирования текста в зависимости от типа файла. Правила определяется в файле с конфигом (&lt;a href="https://github.com/atipugin/dotfiles/blob/master/editorconfig" target="_blank">вот мой&lt;/a>
, например). В больших проектах, в которых участвует много разработчиков, удобно добавлять такой конфиг прямо в репозиторий, чтобы у всех были одинаковые настройки.&lt;/p>
&lt;p>&lt;a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig" target="_blank">Открыть на Marketplace&lt;/a>
&lt;/p>
&lt;h2 id="git-blame">Git Blame&lt;/h2>
&lt;p>Git Blame - простое и супер-удобное расширение для работы с &lt;code>git blame&lt;/code>. Просто ставите курсор на интересующую строку в файле, нажимаете на кнопку и получаете описание коммита с возможностью перейти на страницу с коммитом на GitHub/GitLab/что-там-у-вас.&lt;/p>
&lt;p>&lt;img class="img-fluid" src="https://atipugin.dev/posts/vscode-extensions/git-blame.gif" alt="Git Blame">
&lt;/p>
&lt;p>Раньше для этих целей я использовал &lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens" target="_blank">GitLens&lt;/a>
, но в какой-то момент устал от его тормозов и перешел на Git Blame.&lt;/p>
&lt;p>&lt;a href="https://marketplace.visualstudio.com/items?itemName=waderyan.gitblame" target="_blank">Открыть на Marketplace&lt;/a>
&lt;/p>
&lt;h2 id="project-manager">Project Manager&lt;/h2>
&lt;p>Project Manager сильно упрощает жизнь в плане быстрой навигации между проектами. Вы можете либо вручную добавлять проекты в избранное, либо прописать в настройках папки, в которых расширение будет искать, например, git-репозитории:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;projectManager.git.baseFolders&amp;#34;&lt;/span>: [
&lt;span style="color:#e6db74">&amp;#34;/Users/atipugin/Code&amp;#34;&lt;/span>
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>В примере выше Project Manager просканирует всю папку &lt;code>Code&lt;/code> и добавит найденные репозитории в список проектов, между которыми можно быстро переключаться.&lt;/p>
&lt;p>&lt;a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager" target="_blank">Открыть на Marketplace&lt;/a>
&lt;/p>
&lt;h2 id="better-comments">Better Comments&lt;/h2>
&lt;p>Better Comments раскрашивает комментарии в коде в зависимости от их типа, который определяется по префиксу в начале строки. Например, TODO или предупреждения, на которые нужно обратить внимание.&lt;/p>
&lt;p>Так выглядит код без Better Comments:&lt;/p>
&lt;p>&lt;img class="img-fluid" src="https://atipugin.dev/posts/vscode-extensions/better-comments-off.png" alt="Без Better Comments">
&lt;/p>
&lt;p>А так с ним:&lt;/p>
&lt;p>&lt;img class="img-fluid" src="https://atipugin.dev/posts/vscode-extensions/better-comments-on.png" alt="С Better Comments">
&lt;/p>
&lt;p>&lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments" target="_blank">Открыть на Marketplace&lt;/a>
&lt;/p>
&lt;h2 id="todo-tree">Todo Tree&lt;/h2>
&lt;p>Если вы, как и я, любите развешивать в коде комментарии вида &lt;code>TODO: Не забыть выпилить это через месяц&lt;/code>, то вы точно оцените Todo Tree. Это расширение сканирует текущий проект, находит все подобные напоминания и формирует эдакий &amp;ldquo;список дел&amp;rdquo;.&lt;/p>
&lt;p>Выглядит примерно так:&lt;/p>
&lt;p>&lt;img class="img-fluid" src="https://atipugin.dev/posts/vscode-extensions/todo-tree.png" alt="Todo Tree">
&lt;/p>
&lt;p>&lt;a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree" target="_blank">Открыть на Marketplace&lt;/a>
&lt;/p>
&lt;h2 id="тема-оформления">Тема оформления&lt;/h2>
&lt;p>В комментариях под видео часто спрашивают, какой темой оформления я пользуюсь. Рассказываю:&lt;/p>
&lt;ul>
&lt;li>Тема - &lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme" target="_blank">One Dark Pro&lt;/a>
&lt;/li>
&lt;li>Иконки - &lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme" target="_blank">Material Icon Theme&lt;/a>
&lt;/li>
&lt;/ul>
&lt;p>Полный список плагинов, которыми я пользуюсь, можно найти &lt;a href="https://github.com/atipugin/dotfiles/blob/master/vscode_extensions.txt" target="_blank">здесь&lt;/a>
.&lt;/p></description><author>atipugin@gmail.com (Alexander Tipugin)</author><guid>https://atipugin.dev/posts/vscode-extensions/</guid><pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate></item><item><title>Привет, мир!</title><link>https://atipugin.dev/posts/hello-world/</link><description>&lt;p>Решил провести новогодние праздники с пользой и наконец-то сделать то, что давно хотел, но не доходили руки - завести блог.&lt;/p>
&lt;p>Полгода назад я завел &lt;a href="http://youtube.com/c/GopherSchool" target="_blank">канал на YouTube&lt;/a>
, где делюсь своим опытом в Go. Сам того не ожидая, я получил много позитивных отзывов от людей и понял, что хочу больше делиться какими-то своими знаниями и опытом, рассказывать об интересных мне вещах. Но в формате видео делать это достаточно сложно, потому что даже небольшой ролик отнимает немало времени и сил. Найти тему, написать скрипт, записать видео, смонтировать его и т.д. С текстом же все проще - писать посты можно даже в метро по дороге на работу.&lt;/p>
&lt;p>Сначала были мысли просто завести канал в Telegram, но быстро отказался от этой затеи - слишком уж много ограничений. Поэтому за несколько дней я сел и собрал себе небольшой статичный сайт, благо в 2020 это совсем просто. Из инструментов я взял Hugo для генерации HTML и Webpack для сборки ассетов. Сайт собирается и заливается на &lt;a href="https://pages.github.com" target="_blank">GitHub Pages&lt;/a>
автоматически с помощью &lt;a href="https://github.com/features/actions" target="_blank">GitHub Actions&lt;/a>
. Приятно, что все это бесплатно и не требует никакой поддержки с моей стороны. Исходники сайта лежат &lt;a href="https://github.com/atipugin/atipugin.dev" target="_blank">тут&lt;/a>
.&lt;/p>
&lt;p>На этот год хочу поставить себе цель - писать хотя бы один пост в месяц. Получится или нет - через год узнаем :)&lt;/p></description><author>atipugin@gmail.com (Alexander Tipugin)</author><guid>https://atipugin.dev/posts/hello-world/</guid><pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate></item></channel></rss>